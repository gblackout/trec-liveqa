from copy import deepcopy
from generate_data import *
import matplotlib
from os.path import join as joinpath
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import numpy as np


def printdoc(doc):
    """
    pretty print a dictionary-format of a admission document
    
    input
    -----
    doc: dict generated by generate_data.main
    """

    doc = deepcopy(doc)

    def str2list(doc):
        for k, v in doc.iteritems():
            if type(v) == type(u''):

                if len(v) < 1:
                    continue
                elif v[:1] == u'\n':
                    v = v[1:]

                if u'\n' in v:
                    doc[k] = v.split(u'\n')
                else:
                    doc[k] = v

            elif type(v) == dict:
                doc[k] = str2list(v)

        return doc

    pprint.pprint(str2list(doc))

    print '\n', '=' * 100, '\n'


def foo():
    data_path = '../data/data_as_dict'
    filenames = glob.glob(joinpath(data_path, '*'))

    bound = 5

    for i, filename in enumerate(filenames):
        doc = pickle.load(open(filename))
        printdoc(doc)

        if i == bound:
            break


def bar():
    data_path = '../data/notes_json_all_fields'
    filenames = glob.glob(joinpath(data_path, '*'))
    from generate_data import import_json

    bound = 5

    for i, filename in enumerate(filenames):
        doc = import_json(filename)
        pprint.pprint(doc)
        print '\n', '=' * 100, '\n'
        if i == bound:
            break


def get_med_freq(uni_con_path, med_list_path, output_path):

    def findmed(meddict, seq):
        cnter = Counter()
        for k in meddict:
            for e in [k] + meddict[k][0]:
                if e in seq:
                    cnter[k] += 1
        return cnter

    med_dict = {}
    med_reg = re.compile(r'\w+')
    with open(med_list_path) as f:
        for line in f:
            generic_name, brand_names = line.split(':')
            brand_names = [(e.split()[0]).strip().lower() for e in brand_names.split(',') if med_reg.search(e)]
            med_dict[generic_name.lower()] = [brand_names, 0]

    pprint.pprint(med_dict)

    for i, filename in enumerate(allfilenames(uni_con_path)):
        print '%i\t / \t%i' % (i, 52682), filename

        nc = NoteContainer(filename, mode=1)
        dismed_str = ' '.join(nc.discharge_medications).lower() if nc.discharge_medications else ''

        for k in med_dict:
            for e in [k] + med_dict[k][0]:
                if e in dismed_str:
                    med_dict[k][1] += 1
                    break

    pickle.dump(med_dict, open(output_path+'_dict', 'w'))
    freq_ls = sorted([(k, v[1]) for k,v in med_dict.iteritems()], key=lambda x:x[1], reverse=True)
    with open(output_path+'_freq', 'w') as f:
        for k, v in freq_ls:
            print >> f, k, v

    pprint.pprint(med_dict)

    # med_dict = {}
    # med_reg = re.compile(r'\w+')
    # type_cnt = 0
    # with open('./hypertension_med_list') as f:
    #     for line in f:
    #         generic_name, brand_names = line.split(':')
    #         brand_names = [e.strip().lower() for e in brand_names.split(',') if med_reg.search(e)]
    #         med_dict[generic_name.lower()] = [brand_names, type_cnt]
    #         type_cnt += 1
    #
    # corr = np.zeros((len(med_dict),len(med_dict)), dtype=np.float32)
    #
    # def findmed(meddict, seq):
    #     cnter = Counter()
    #     for k in meddict:
    #         for e in [k] + meddict[k][0]:
    #             if e in seq:
    #                 cnter[k] += 1
    #     return cnter
    #
    #
    # for i, filename in enumerate(allfilenames(uni_con_path)):
    #     print '%i\t / \t%i' % (i, 52682), filename
    #
    #     nc = NoteContainer(filename, mode=1)
    #     admed_str = ' '.join(nc.admission_medications).lower() if nc.admission_medications else ''
    #     dismed_str = ' '.join(nc.discharge_medications).lower() if nc.discharge_medications else ''
    #
    #     adm_cnter = findmed(med_dict, admed_str)
    #     dis_cnter = findmed(med_dict, dismed_str)
    #
    #     for ad_k in adm_cnter:
    #         x_ind = med_dict[ad_k][1]
    #         for dis_k in dis_cnter:
    #             y_ind = med_dict[dis_k][1]
    #             corr[x_ind, y_ind] += 1
    #
    # np.save('corr_arr', corr)
    # pickle.dump(med_dict, open('med_dict', 'w'))


    # med_dict = pickle.load(open('med_dict'))
    # med_list = sorted([(k, v) for k, v in med_dict.iteritems()], key=lambda x: x[1][0])
    # x_ticks, allcnts = zip(*med_list)
    # type_list, adm_y, dis_y = zip(*allcnts)
    # x = range(len(x_ticks))
    #
    # print 1
    #
    # fig, ax1 = plt.subplots(figsize=(30, 10))
    #
    # ax1.plot(x, adm_y, 'b-')
    # ax1.set_xlabel('medications')
    # plt.xticks(x, x_ticks, rotation=50, ha='right')
    # plt.setp(ax1.get_xticklabels(), fontsize=10)
    #
    # print 1.5
    # colormap = plt.cm.gist_ncar
    #
    # import random
    #
    # colors = [colormap(i) for i in np.linspace(0, 0.9, len(set(type_list)))]
    # random.shuffle(colors)
    # cnt = 0
    # for xtick in ax1.get_xticklabels():
    #     xtick.set_color(colors[med_dict[x_ticks[cnt]][0]])
    #     cnt += 1
    #
    # print 2
    #
    # # Make the y-axis label, ticks and tick labels match the line color.
    # ax1.set_ylabel('admission frequency', color='b')
    # ax1.tick_params('y', colors='b')
    # ax1.xaxis.grid(True)
    #
    # ax2 = ax1.twinx()
    # ax2.plot(x, dis_y, 'r-')
    # ax2.set_ylabel('discharge frequency', color='r')
    # ax2.tick_params('y', colors='r')
    #
    # print 3
    #
    # fig.tight_layout()
    # # plt.show()
    # plt.savefig('123.png')
    #
    # print 4



def cov():
    stats = []

    with open('hyper_label_index_withadm') as f:
        for line in f:
            adm_id, adm_med, dis_med = line.split(';')
            dis_med = map(int, dis_med.split())
            stats.append(sum(dis_med))

    print np.mean(stats), np.std(stats)

    print np.max(stats), np.min(stats)



def parse_nih_data():
    import pickle, collections, pprint
    res = pickle.load(open('../pickerResult'))['requests']

    # cnter = collections.Counter()
    # num_ls = []

    data = []

    for req_ls in res:
        d = [req_ls['text']]
        q_type = set()
        for req in req_ls['questions']:
            subq_ls = req['subquestions']

            for subq in subq_ls:
                q_type.add(subq['category'])

        d.append([t for t in q_type])
        data.append(d)

    pickle.dump(data, open('nih_data', 'w'))
    pprint.pprint(data)

    # pprint.pprint(cnter)
    # print np.mean(num_ls), np.std(num_ls)




def parse_trec_data():
    import pickle, collections, pprint

    res = pickle.load(open('../nih_data'))

    pprint.pprint(res)

    cnter = collections.Counter()
    for q in res:
        cnter.update([e.lower() for e in q[1]])

    pprint.pprint(cnter)

    # res = pickle.load(open('../trec_data'))
    #
    # pprint.pprint(res)
    #
    # cnter = collections.Counter()
    # for q in res:
    #     cnter.update(q[1])
    #
    # pprint.pprint(cnter)
    #
    # print sum([cnter[k] for k in cnter])

trec_synonyms = {
                'information':['information', 'association', 'inheritance'],
                'treatment': ['treatment', 'prevention'],
                'cause':['cause'],
                'diagnosis':['diagnosis'],
                'prognosis':['prognosis'],
                'drug_info':['dosage', 'ingredient', 'tapering', 'storage and disposal', 'indication', 'usage'],
                'organization':['resources', 'organization'],
                'drug_interaction':['contraindication', 'side effects', 'interaction'], # connection to two drugs/ one drug one disease
                'susceptibility':['susceptibility'], # prevent, what to do to protect, who/how old is likely to get this, how common
                'symptom':['symptom', 'complication'] # how like in future, chance to survive, how bad it can get
                }

nih_synonyms = {
                'information':['information', 'other', 'notdisease', 'anatomy'],
                'treatment':['management'],
                'cause':['cause'],
                'susceptibility':['susceptibility'],
                'prognosis':['prognosis'],
                'diagnosis':['diagnosis'],
                'symptom':['othereffect', 'manifestation', 'complication'],
                'organization':['personorg'],
                }


workup = {'How can I learn about research involving primary ciliary dyskinesia and Kartagener syndrome?':['information'],
          'How is amyloidosis diagnosed in those with familial Mediterranean fever? How is the effectiveness of colchicine monitored?':['diagnosis', 'management'],
          'I am researching the link between Greig cephalopolysyndactyly syndrome, hydrocephalus, and seizures. I am curious about the reason for the hydrocephalus: is it a blockage issue or a slow draining issue?':['othereffect'],
          "I'd like to learn more about megalocytic interstitial nephritis with malakoplakia.":['information'],
'If a woman has a XXY karyotype, does this mean that she has Klinefelter syndrome?':['information'],
'I had preeclampsia and HELLP syndrome with what I believe to be my first and only pregnancy. I believe my sister had eclampsia with her second pregnancy. I also believe that our mother may have had this condition but little was known at the time of my birth. Both my sister and I now have a daughter. Given our history, does this mean that they are at a higher risk for having these problems? My daughter is just learning of these things and is concerned that she will have the same complications as we did, so I told her I would look into it for her.':['susceptibility'],
'I have a loved one with hereditary leiomyomatosis and renal cell cancer who has a lot of skin leiomyomas. Does this mean he is at a particularly increased risk for developing renal cell carcinoma?':['complication'],
'I have a patient who may have Williams syndrome. His mother was previously diagnosed with familial Mediterrranean fever, but she has facial features consistent with Williams syndrome. Do Williams syndrome and familial Mediterranean fever share any signs or symptoms?':['manifestation'],
'I have been recently diagnosed with antisynthetase syndrome, acute interstitial lung disease, muscle weakness, skin involvement, scleroderma, and dermatomyositis. Could you please provide me with information on antisynthetase syndrome? I am also interested in learning about prognosis, treatment, and clinical trials.':['information', 'prognosis', 'management'],
'My grandson has Joubert syndrome, autism, and ADHD. Is autism related to Joubert syndrome?':['othereffect'],
'My husband was diagnosed with multiple sclerosis (MS) in 1999, and now with a second opinion he was diagnosed with possible primary lateral sclerosis (PLS). How does MS differ from PLS? How are MS and PLS diagnosed?':['other', 'diagnosis'],
'My one year-old daughter was admitted in the hospital because of breathing problems. Her ph level was 6.7 and she was unconscious for eight days. During those days there were many problems. Her doctor said that she had SCOT deficiency OR carnitine palmitoyl transferase 1 deficiency. Now she is normal. Will this happen again?':['prognosis'],
'My sister and I have neurofibromas and dermal eccrine cylindromas. Do you have ANY information on these tumors or know where I can get more information?':['information'],
'My sister was recently diagnosed with Horner syndrome. Last year I was diagnosed with cluster headaches. Are these two condition related?':['othereffect'],
'My son was born with a vascular lesion in the right groin area. A biopsy of the lesion suggested it is likely to be a non-involuting congenital hemangioma (NICH), but there is a possibility it is a kaposiform hemangioendothelioma. I would like to know why it has not been possible to determine which of the two it actually is and why surgical excision will be necessary in the future.':['diagnosis', 'management'],
'What are the chances of having alpha 1-antitrypsin deficiency and panniculitis?':['susceptibility'],
'What can you tell me about acute intermittent porphyria and Chester porphyria?':['information'],
'What is the difference between a epithelioid sarcoma and a lipoma or liposarcoma?':['diagnosis'],
'What is the difference between cryoglobulinemia and cold agglutinin disease?':['diagnosis'],
'What is the difference between Roberts syndrome and tetra-amelia syndrome? How can my condition be diagnosed?':['diagnosis'],
"What is the difference between uterine adenosarcoma and uterine adenocarcinoma? Or are they the same thing? I'm trying to research this diagnosis and keep seeing these phrases used interchangeably.":['diagnosis', 'information'],
"What percentage of patients with Wolff Parkinson White syndrome have Ebstein's anomaly?":['susceptibility'],
'When I was about 8-years-old, I was hospitalized due to encephalitis lethargica. I was extremely ill and it took me a long time to recover. Last May, I was diagnosed with a benign meningioma. Could my childhood illness be related to the development of my tumor? Are there any documented cases of meningioma in other survivors of encephalitis lethargica?':['othereffect'],
          }



def collapse_types():
    import pickle, collections, pprint

    res = pickle.load(open('../trec_data'))

    cnter = collections.Counter()

    for i in xrange(len(res)):
        type_ls = res[i][1]
        collapsed_type = set()

        assert len(type_ls) > 0
        for t in type_ls:
            if t == 'genetic changes':
                collapsed_type.add('information')
                continue

            found_flag = False
            for k, v in trec_synonyms.iteritems():
                for syn in v:
                    if syn == t:
                        collapsed_type.add(k)
                        found_flag = True
                        break
                if found_flag:
                    break

            assert found_flag, res[i]

        res[i][1] = [e for e in collapsed_type]

        cnter.update(collapsed_type)

    total_res = res

    res = pickle.load(open('../nih_data'))

    for i in xrange(len(res)):
        type_ls = [e.lower() for e in res[i][1]]
        collapsed_type = set()

        if res[i][0] in workup:
            type_ls = workup[res[i][0]]

        assert len(type_ls) > 0
        for t in type_ls:
            found_flag = False
            for k, v in nih_synonyms.iteritems():
                for syn in v:
                    if syn == t:
                        collapsed_type.add(k)
                        found_flag = True
                        break
                if found_flag:
                    break

            assert found_flag, res[i]

        res[i][1] = [e for e in collapsed_type]

        cnter.update(collapsed_type)

    total_res += res

    name2ind = dict()
    ind = 0

    with open('type_freq', 'w') as f:
        for k,v in cnter.most_common():
            name2ind[k] = ind
            ind += 1
            print >> f, k, v



    final_out = []

    for q in total_res:
        type_mask = [0]*len(name2ind)

        for t in q[1]:
            type_mask[name2ind[t]] = 1

        final_out.append([q[0], type_mask])

    pprint.pprint(final_out)

    with open('type_data', 'w') as f:
        pickle.dump(final_out, f)

    pprint.pprint(name2ind)




if __name__ == '__main__':
    # get_med_freq('uni_containers_tmp/', 'diabetes_med_list', 'diabetes_med')
    # cov()

    # parse_trec_data()
    collapse_types()



























